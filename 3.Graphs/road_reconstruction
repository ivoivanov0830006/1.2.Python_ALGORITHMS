def dfs(node, graph, visited):
    if visited[node]:
        return
    visited[node] = True
    for child in graph[node]:
        dfs(child, graph, visited)


nodes_count = int(input())
edges_count = int(input())

graph = []
[graph.append([]) for _ in range(nodes_count)]

edges = []

for _ in range(edges_count):
    first, second = [int(x) for x in input().split(" - ")]
    graph[first].append(second)
    graph[second].append(first)
    edges.append((min(first, second), max(first, second)))

important_streets = []
print(f"Important streets:")

for first, second in edges:
    graph[first].remove(second)
    graph[second].remove(first)

    visited = [False] * nodes_count
    dfs(0, graph, visited)

    if not all(visited):
        print(first, second)

    graph[first].append(second)
    graph[second].append(first)

# Write a program that finds all the roads without which buildings in the city
# will become unreachable. You will receive how many buildings the town has on
# the first line, then you will receive the number of streets and finally, for each street,
# you will receive which buildings it connects. Find all the streets that are important and
# cannot be removed and print them in ascending order (e. g. 3 0 should be printed as 0 3).
# Input
#   - On the first line, you will receive the number of buildings.
#   - On the second line, you will receive the amount of the streets (n).
#   - On the next "n" lines you will receive which buildings each street connects.
# Output
#   - On the first line print: "Important streets:".
#   - On the next lines (if any) print the street in the format: "{firstBuilding} {secondBuilding}".
#   - The order of the output does not matter if you print all the important streets
# Input                     Output
# 5                         Important streets:              1---0---3
# 5                         0 3                             |  /    |
# 1 - 0                     3 4                             | /     4
# 0 - 2                                                     |/
# 2 - 1                                                     2
# 0 - 3
# 3 - 4
# --------------------------------------------
# 7                         Important streets:
# 8                         1 6
# 0 - 1
# 1 - 2                                                 0       3
# 2 - 0                                                 | \   /   \
# 1 - 3                                                 |   1      5
# 1 - 4                                                 | / | \   /
# 1 - 6                                                 2   |   4
# 3 - 5                                                     6
# 4 - 5
