def dfs(node, graph, visited, cycles):
    if node in cycles:
        raise Exception
    if node in visited:
        return
    visited.add(node)
    cycles.add(node)

    for child in graph[node]:
        dfs(child, graph, visited, cycles)

    cycles.remove(node)


graph = {}
while True:
    line = input()
    if line == "End":
        break
    source, destination = line.split("-")
    if source not in graph:
        graph[source] = []
    if destination not in graph:
        graph[destination] = []
    graph[source].append(destination)

visited = set()
try:
    for node in graph:
        dfs(node, graph, visited, set())
    print("Acyclic: Yes")
except Exception:
    print("Acyclic: No")

# Write a program to check whether a directed graph is acyclic or holds any cycles.
# The input ends with "End" line.
# Input                             Output
# A-F                               Acyclic: N
# F-D
# D-A
# End
# ------------------------------------------------------------
# K-J                               Acyclic: Yes
# J-N
# N-L
# N-M
# M-I
# End
